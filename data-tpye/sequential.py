# 순서형 타입
## 값들이 연속적으로 저장된 형태를 의미한다.
## 사실 문자형도 순서형. 그 외에 대표적인 건 리스트와 튜플. 
## 문자형에서도 사용하는 인덱싱, 슬라이싱, + 로 연결, * 로 반복, in 으로 멤버 검사, len 으로 길이 반환 다 가능

## 1. list 기본 사용
a = [1, 2, 3, 4]
print(a)
print(a[0]) # 요소 하나만을 반환
print(a[1:2]) # 배열로 반환

### 1-1. 다중 리스트
b = [1, 2, 3, [4, 5, 6]]
print(b[3]) # [4, 5, 6]
print(b[3][2]) # [6]

### 1-2. 리스트의 수정
c = ['x', 'y', 'z']
c[2] = 0
print(c) # ['x', 'y', 0]


## 2. 리스트 관련 함수
### 2-1. .append() : 요소 추가 (자바스크립트의 push)
x = [1, 2, 3, 4]
x.append(5) 
print(x) # [1, 2, 3, 4, 5]

### 2-2. .sort() : 정렬 / sorted : 원본 리스트에 영향을 주지 않는다. 새로운 배열을 반환
y = [4, 6, 10, 213, 44, 1, 21, 2]  
z = [4, 6, 10, 213, 44, 1, 21, 2]

y.sort()
print(y) # [1, 2, 4, 6, 10, 21, 44, 213]

sorted(z)
print(sorted(z)) # [1, 2, 4, 6, 10, 21, 44, 213]
print(z) # [4, 6, 10, 213, 44, 1, 21, 2]



### 2-3. .reverse() : 뒤집기
y.reverse()
print(y) # [213, 44, 21, 10, 6, 4, 2, 1]

### 2-4. .index() : 위치 반환
print(y.index(10)) # 3
# print(y.index(9999)) 에러 발생

### 2-5. del : 삭제
del y[0]
print(y) # [44, 21, 10, 6, 4, 2, 1]

### 2-6. + : 리스트 연결
x1 = [1, 2, 3, 4]
y1 = ['과연', '어떻게', '될 것인가']
print(x1 + y1) # [1, 2, 3, 4, '과연', '어떻게', '될 것인가']
print(x1) # [1, 2, 3, 4] => 원본 배열에는 영향을 주지 않는다.

### 2-7 * : 리스트 반복
print(x1 * 3) #  [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]

### 2-8 len : 길이 값
print(len(x1)) # 4
print(len(y1)) # 3




# 튜플
## 튜플은 리스트와 거의 비슷하다. [] 이 아닌 () 로 사용한다.
## 만약, 1개의 요소만 갖는다고 해도 반드시 ' , ' 를 붙여만 한다.
p = (1,)
## 튜플과 리스트의 가장 큰 차이는 튜플은 값을 변경할 수 없다는 것
p = (1, 2, 3, 4)
# p[1] = 2 : 이게 에러를 발생시킨다.
print(p)


# Set
## 데이터를 순서와 상관 없이 중복도 허가하지 않고 모아놓은 자료형
## 그렇기에 순서형은 아니지만 튜플, 리스트와 유사성이 많다.

q = {1, 2, 3} # 중괄호로 선언이 가능하고
print(q) # {1, 2, 3}
# print(q[1]) 순서가 없기에 인덱싱이 안 된다

q1 = set(['1', '2', '3', '3']) # 혹은 리스트를 set() 안에 넣는 방법도 있다.
print(q1) # {'2', '3', '1'}, {'3', '2', '1'} 등 순서가 뒤죽박죽으로 나온다. 단, 중복은 항상 허락하지 않아 '3' 은 딱 한 번만 나온다.

q2 = set('hello')
print(q2) # {'e', 'l', 'o', 'h'}, {'o', 'e', 'h', 'l'} 마찬가지로 순서 뒤죽박죽

## 1. 값의 연산
### 1-1) add : 값 추가
s = {1, 2, 3}

s.add(4)
print(s) # {1, 2, 3, 4}

### 1-2) clear : 전체 제거
print(s.clear()) # None => 이거 사용하는 이유는 메모리를 비워주기 위함

### 1-3) union : 합집합
s = {1, 2, 3}
r = {3, 4, 5}

print(s.union(r)) # {1, 2, 3, 4, 5}

### 1-4) intersection : 교집합
print(s.intersection(r)) # {3}

### 1-5) difference : 차집합
print(s.difference(r)) # {1, 2}
print(r.difference(s)) # {4, 5}


# List , Tuple, Set 형 변환 : 상호간에 형 변환은 자유로우나 원본에는 영향을 주지 않는다.
## list() : 리스트로 변환
h={1, 2, 3}
print(list(h)) # [1, 2, 3]
print(h) # {1, 2, 3}

## tuple() : 튜플로 변환
print(tuple(h)) # (1, 2, 3)
print(h) # {1, 2, 3}

## set() : set 으로 변환
t=[1, 2, 3]
print(set(t)) # {1, 2, 3}
print(t) # [1, 2, 3]

